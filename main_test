package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/rifirei/srclient"
)

var schemaRegistryURL = "http://localhost:8081"
var schemaRegistryClient = srclient.NewClient(schemaRegistryURL)

func TestPostJsonToAvro(t *testing.T) {
	// Prepare test data
	data := map[string]interface{}{
		"name": "John Doe",
		"age":  30,
		"city": "New York",
	}
	jsonData, _ := json.Marshal(data)

	// Create test request and response
	req, err := http.NewRequest("POST", "/convert", bytes.NewBuffer(jsonData))
	if err != nil {
		t.Fatalf("Failed to create request: %s", err)
	}

	rr := httptest.NewRecorder()

	// Call the handler function
	handler := http.HandlerFunc(PostJsonToAvro)
	handler.ServeHTTP(rr, req)

	// Check the response status code
	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}

	// Read response body
	body, err := ioutil.ReadAll(rr.Body)
	if err != nil {
		t.Fatalf("Failed to read response body: %s", err)
	}

	// Get the schema ID from the response body
	var responseData map[string]interface{}
	err = json.Unmarshal(body, &responseData)
	if err != nil {
		t.Fatalf("Failed to unmarshal response: %s", err)
	}
	schemaID := int(responseData["schema_id"].(float64))

	// Get the schema from schema registry using the schema ID
	schema, err := schemaRegistryClient.GetSchemaByID(schemaID)
	if err != nil {
		t.Fatalf("Failed to get schema from schema registry: %s", err)
	}

	// Decode the avro data and check if it matches the original JSON data
	decodedData, _, err := schemaRegistryClient.Decode(body, schema)
	if err != nil {
		t.Fatalf("Failed to decode avro data: %s", err)
	}
	if decodedData != data {
		t.Errorf("Decoded data does not match original data: got %v want %v",
			decodedData, data)
	}
}
